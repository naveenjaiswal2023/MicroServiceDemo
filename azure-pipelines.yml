trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  azureSubscription: 'MyMicroServiceAzureConnection'

stages:

# --------------------------
# CI Stage: Build All Services
# --------------------------
- stage: Build
  jobs:
  - job: BuildServices
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    # ProductService
    - task: DotNetCoreCLI@2
      displayName: Restore ProductService
      inputs:
        command: 'restore'
        projects: 'ProductService/ProductService.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build ProductService
      inputs:
        command: 'build'
        projects: 'ProductService/ProductService.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Publish ProductService
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'ProductService/ProductService.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/ProductService'
        zipAfterPublish: true

    # OrderService
    - task: DotNetCoreCLI@2
      displayName: Restore OrderService
      inputs:
        command: 'restore'
        projects: 'OrderService/OrderService.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build OrderService
      inputs:
        command: 'build'
        projects: 'OrderService/OrderService.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Publish OrderService
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'OrderService/OrderService.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/OrderService'
        zipAfterPublish: true

    # APIGateway
    - task: DotNetCoreCLI@2
      displayName: Restore APIGateway
      inputs:
        command: 'restore'
        projects: 'APIGateway/APIGateway.csproj'

    - task: DotNetCoreCLI@2
      displayName: Build APIGateway
      inputs:
        command: 'build'
        projects: 'APIGateway/APIGateway.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Publish APIGateway
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'APIGateway/APIGateway.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/APIGateway'
        zipAfterPublish: true

    # Publish All Artifacts
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'


# --------------------------------------------------
# CD Stages for ProductService
# --------------------------------------------------
- stage: Deploy_Dev_ProductService
  dependsOn: Build
  jobs:
  - deployment: DeployDevProductService
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'productservice-api-dev'
              package: '$(Pipeline.Workspace)/drop/ProductService/*.zip'

- stage: Deploy_QA_ProductService
  dependsOn: Deploy_Dev_ProductService
  condition: succeeded()
  jobs:
  - deployment: DeployQAProductService
    environment: 'qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'productservice-api-qa'
              package: '$(Pipeline.Workspace)/drop/ProductService/*.zip'

- stage: Deploy_Prod_ProductService
  dependsOn: Deploy_QA_ProductService
  condition: succeeded()
  jobs:
  - deployment: DeployProdProductService
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'productservice-api'
              package: '$(Pipeline.Workspace)/drop/ProductService/*.zip'


# --------------------------------------------------
# CD Stages for OrderService
# --------------------------------------------------
- stage: Deploy_Dev_OrderService
  dependsOn: Build
  jobs:
  - deployment: DeployDevOrderService
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'orderservice-api-dev'
              package: '$(Pipeline.Workspace)/drop/OrderService/*.zip'

- stage: Deploy_QA_OrderService
  dependsOn: Deploy_Dev_OrderService
  condition: succeeded()
  jobs:
  - deployment: DeployQAOrderService
    environment: 'qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'orderservice-api-qa'
              package: '$(Pipeline.Workspace)/drop/OrderService/*.zip'

- stage: Deploy_Prod_OrderService
  dependsOn: Deploy_QA_OrderService
  condition: succeeded()
  jobs:
  - deployment: DeployProdOrderService
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'orderservice-api'
              package: '$(Pipeline.Workspace)/drop/OrderService/*.zip'


# --------------------------------------------------
# CD Stages for APIGateway
# --------------------------------------------------
- stage: Deploy_Dev_APIGateway
  dependsOn: Build
  jobs:
  - deployment: DeployDevAPIGateway
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'apigateway-api-dev'
              package: '$(Pipeline.Workspace)/drop/APIGateway/*.zip'

- stage: Deploy_QA_APIGateway
  dependsOn: Deploy_Dev_APIGateway
  condition: succeeded()
  jobs:
  - deployment: DeployQAAPIGateway
    environment: 'qa'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'apigateway-api-qa'
              package: '$(Pipeline.Workspace)/drop/APIGateway/*.zip'

- stage: Deploy_Prod_APIGateway
  dependsOn: Deploy_QA_APIGateway
  condition: succeeded()
  jobs:
  - deployment: DeployProdAPIGateway
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'apigateway-api'
              package: '$(Pipeline.Workspace)/drop/APIGateway/*.zip'
